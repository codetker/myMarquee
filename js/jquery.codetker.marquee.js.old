/*
 * boxScroll 0.1
 * 兼容等常见浏览器
 * 能形成环，但是无法暂停的两种版本。。。
 */
 ;(function($,window,document,undefined){
 	//定义构造函数
 	var BoxObj=function(ele,opt){
 		this.$element=ele; //最外层对象
 		this.defaults={
 			'style': 0 ,//滚动样式选择,默认为普通效果
 			'speed': 1 ,//默认为1s
 			'direction': 'left'//默认为向左边滚动
 		},
 	
 		this.options=$.extend({},this.defaults,opt );
 		//这里可以添加一些通用方法	
 	}

 	//给构造函数添加方法
 	BoxObj.prototype={

 		commonScroll:function(){
 			//接收对象属性
 			var boxWindow=$(this.$element).children('ul');
 			var speed=this.defaults.speed;
 			var style=this.defaults.style;
 			var direction=(this.defaults.direction=='left')? 1 : -1;
 			var lists=$(boxWindow).children('li');
 			var len=$(lists).length;
 			var boxWidth=$(lists[0]).width();
 			var timer;

 			function move(style,speed,direction){
 				if (style==0) {
 					if (direction==1) {
 
						$(boxWindow).children().eq(0).animate({//用animate的问题在于同时使用Interval容易重合
							'margin-left':'-500px'},3000*speed,'linear',function(){//也可以是+=,更能体现运动方向
							 	$(boxWindow).children().css('margin-left','0'); //一定要记得回0，不然就重合了//eq(0)去掉稳定性更好
							 	$(boxWindow).append($(boxWindow).children().eq(0));
							}
						);


 					}else if (direction== -1) {
 					
 						$(boxWindow).css('margin-left','-500px');//防止最左边变化的一项被显示出来
 						$(boxWindow).children().eq(0).animate({
 							'margin-left':'500px'},3000*speed,'linear',function(){//也可以是+=,更能体现运动方向
 							 	$(boxWindow).children().css('margin-left','0'); //一定要记得回0，不然就重合了
 							 	$(boxWindow).prepend($(boxWindow).children().eq(len-1));
 							}
 						);
 					}else{//不执行之外的数值

 					}
 				}else{//留待扩展

 				}
 			}

 			timer=setInterval(function(){
 				move(style,speed,direction);
 			},3050*speed);

 			// $(boxWindow).delegate('li', 'mouseover', function() {  //一次性，并没有什么用。。。
 			// 	clearInterval(timer);  
 			// });
 			// $(boxWindow).delegate('li', 'mousemove', function() {
	 		// 	timer=setInterval(function(){
	 		// 		move(style,speed,direction);
	 		// 	},3050*speed);
 			// });
 		}
 			
 	}

 	//在插件中使用windowObj对象的方法，0为vertical，1为horizontal
 	$.fn.marquee=function(options){
 		//创建实体
 		var boxObj=new BoxObj(this,options);
 		//用尾调的形式调用对象方法
 		return boxObj.commonScroll();
 	}
 })(jQuery,window,document);


 			/*function move(style,speed,direction){
 				if (style==0) {
 					if (direction==1) {
 						
 						function moveLeft(){
 							$(boxWindow).children().eq(0).animate({
	 							'margin-left':'-500px'},2000*speed,'linear',function(){//也可以是+=,更能体现运动方向
	 							 	$(boxWindow).children().eq(0).css('margin-left','0'); //一定要记得回0，不然就重合了//eq(0)去掉稳定性更好
	 							 	$(boxWindow).append($(boxWindow).children().eq(0));
	 							 	moveLeft();//通过尾调自身实现循环,但是无法实现暂停
	 							}
 							);
 						}
 						moveLeft();//启动
 					}else if (direction== -1) {
 					
 						$(boxWindow).css('margin-left','-500px');//防止最左边变化的一项被显示出来
 						function moveRight(){
	 						$(boxWindow).children().eq(0).animate({
	 							'margin-left':'500px'},3000*speed,'linear',function(){//也可以是+=,更能体现运动方向
	 							 	$(boxWindow).children().eq(0).css('margin-left','0'); //一定要记得回0，不然就重合了
	 							 	$(boxWindow).prepend($(boxWindow).children().eq(len-1));
	 							 	moveRight();
	 							}
	 						);
 						}
 						moverRight();
 					}else{//不执行之外的数值

 					}
 				}else{//留待扩展

 				}
 			}
			move(style,speed,direction);*/